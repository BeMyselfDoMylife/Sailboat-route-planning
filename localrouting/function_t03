function psi_d  = fcn(xnow , ynow , xknext , yknext , xkstart , ykstart , k , U , V , psi_now , betaAW , obstacle , w)
% w分别为避碰、推力、转角/换舷的代价权重
% obstacle为障碍物相对xk,yk的形状位置(限定为仅有一个多边形，若有多个障碍物设想（但此处未实现）可以在相邻探测点发现无障碍点的出现)
numvert = size(obstacle , 2);
xobstacle = zeros(1 , numvert);
yobstacle = zeros(1 , numvert);
for i = 1 : numvert
    xobstacle(i) = xkstart + obstacle(1,i);
    yobstacle(i) = ykstart + obstacle(2,i);
end
betaLeeway = atan2(V , U);
psiTarget = atan2(yknext - ynow ,xknext - xnow);
lengthb2t = sqrt((xknext - xnow)^2 + (yknext - ynow)^2);
fitnessPsid = zeros(1 , 72);
fitness1 = zeros(1 , 72);
fitness2 = zeros(1 , 72);
fitness3 = zeros(1 , 72);
i = 0;
for psiD = 0 : 5*pi/180 : 355*pi/180
    i = i + 1;
    betaD = psiD - (psi_now);
    
    fitness3(i) = turningcost(psiTarget , psiD , psi_now);
%     fitness2(i) = thrust4psid(betaD , betaAW); %vote t0301
    fitness2(i) = thrust4psid(betaD , betaAW)*[cos(psiD),sin(psiD)]*[cos(psiTarget),sin(psiTarget)]'; % vote t0302
    if k == 0 || k == 1
        fitness1(i) = avoidance(psiD , xnow , ynow , xobstacle , yobstacle);
    else
        fitness1(i) = 0;
    end
    
    fitnessPsid(i) = w(1)*fitness1(i) + w(2)*fitness2(i) + w(3)*fitness3(i);
end
[~ , seque4Psid] = sort(fitnessPsid,'descend');
psi_d1 = (seque4Psid(1)-1)*5*pi/180;
psi_d2 = (seque4Psid(2)-1)*5*pi/180;
if psi_d1 > pi
    psi_d1 = psi_d1 - 2*pi;
end
if psi_d2 > pi
    psi_d2 = psi_d2 - 2*pi;
end
if abs(psi_d1 - psiTarget) > abs(psi_d2 - psiTarget)
    psi_d = psi_d2;
else
    psi_d = psi_d1;
end
end

function thrustCoef = thrust4psid(betaD , betaAW)
    arsail = 2.5;
    attack = howcontrolsail(betaAW);
    [cls,cds] = sailcoef(attack,arsail);
    theta = atan(cds/cls);
    alpha = mod(betaD - betaAW , 2*pi);
    if alpha > pi
        alpha = alpha - 2*pi;
        k = -1;
    else
        k = 1;
    end    
  
    if alpha < -theta 
        thrustCoef = k*sqrt(cls^2+cds^2)*sin(alpha + theta);
    elseif alpha > theta
        thrustCoef = k*sqrt(cls^2+cds^2)*sin(alpha - theta);
    else
        thrustCoef = 0;
    end
    if thrustCoef < 0
        thrustCoef = 0;
    end
end

function attack = howcontrolsail(betaAW)
    betaAW = mod(betaAW,2*pi);
    if betaAW > pi
        betaAW = betaAW - 2*pi;
        k = -1;
    else
        k = 1;
    end
    betaAWdata = [0:10:180]*pi/180;
    attackdata = [8 8 8 8 8 27 31 39 39 50 50 55 59 64 64 73 77 82 90]*pi/180;
    attack = k*interp1(betaAWdata , attackdata , abs(betaAW));
end

function [Cls,Cds] = sailcoef(attack,arsail)
% generate a lookup table for the lift/drag coefficients for the sail
% and compute Cls/Cds from the lookup table using interpolation.
% lookup table
adata =pi/180*[0	1	2	3	4	5	6	7	8	9	10	11	12	13	14	15	16 ...
    17	18	19	20	21	22	23	24	25	26	27	30	35	40	45	50	55	60 ...
    65	70	75	80	85	90	95	100	105	110	115	120	125	130	135	140	145	150 ...
    155	160	165	170	175	180];
cldata = [0.0000	0.1100	0.2200	0.3300	0.4180	0.5180	0.5048	0.6760	0.7189...
    0.6969	0.5122	0.1642	0.0749	0.0967	0.1382	0.1861	0.2364	0.2873...
    0.3393	0.3927	0.4463	0.5001	0.5539	0.6078	0.6617	0.7156	0.7700...
    0.8277	0.8550	0.9800	1.0350	1.0500	1.0200	0.9550	0.8750	0.7600...
    0.6300	0.5000	0.3650	0.2300	0.0900	-0.0500	-0.1850	-0.3200	-0.4500...
    -0.5750	-0.6700	-0.7600	-0.8500	-0.9300	-0.9800	-0.9000	-0.7700	-0.6700...
    -0.6350	-0.6800	-0.8500	-0.6600	0.0000];
cddata = [0.0147	0.0148	0.0151	0.0156	0.0168	0.0181	0.0197	0.0214	0.0234...
    0.0255	0.0277	0.0760	0.1230	0.1400	0.1580	0.1770	0.1960	0.2170...
    0.2380	0.2600	0.2820	0.3050	0.3290	0.3540	0.3790	0.4050	0.4320...
    0.4600	0.5700	0.7450	0.9200	1.0750	1.2150	1.3450	1.4700	1.5750...
    1.6650	1.7350	1.7800	1.8000	1.8000	1.7800	1.7500	1.7000	1.6350...
    1.5550	1.4650	1.3500	1.2250	1.0850	0.9250	0.7550	0.5750	0.4200...
    0.3200	0.2300	0.1400	0.0550	0.0250];
% 展弦比换算
xdata = adata + cldata./pi*(1/arsail);
yldata = cldata;
yddata = cddata + cldata.^2/pi*(1/arsail);
[xdata , xnum] = sort(xdata);
yldata = yldata(xnum);
yddata = yddata(xnum);

attack=mod(attack,2*pi);
if attack>pi
    attack=attack-2*pi;
end

if attack>=0
    Cls = interp1(xdata,yldata,attack);
    Cds = interp1(xdata,yddata,attack);
else
    Cls = -1*interp1(xdata,yldata,-attack);
    Cds = interp1(xdata,yddata,-attack);
end
end

function tackCoef = turningcost(psiTarget , psiD , psi_now)
    turn = mod(psiD - psi_now , 2*pi);
    if turn > pi
        turn = turn - 2*pi;
    end
    turnnoyet = mod(psiTarget - psiD , 2*pi);
    if turnnoyet > pi
        turnnoyet = turnnoyet - 2*pi;
    end
    if abs(turnnoyet) > pi/2 || abs(turn) > pi/2
        tackCoef = 0;
    else
        tackCoef = (1 - abs(turnnoyet)*2/pi)*(1 - abs(turn)*2/pi)^0.8;
    end
%     tackCoef = 1/(1 + exp(-10*(tackCoef-0.5)));
end

function safeCoef = avoidance(psiD , xnow , ynow , xobstacle , yobstacle)
numvert = size(xobstacle , 2);
rotatepoint = zeros(1 , numvert); % 相对dirvec的方向向右旋转（叉乘为负）则为-1，反向为1，平行为0
mincross = zeros(1 , numvert);
mint = zeros(1 , numvert);
dirvec = [cos(psiD),sin(psiD)];
for i = 1 : numvert
    xi = xobstacle(i);
    yi = yobstacle(i);
    mint(i) = -((xnow - xi)*cos(psiD) + (ynow - yi)*sin(psiD));
    rotatepoint(i) = multip(dirvec , [xi - xnow , yi - ynow]);
%     if mint(i) < 0
%         mincross(i) = sqrt((xnow - xi)^2 + (ynow - yi)^2)*2.0 ;
%     elseif mint(i) > 20
%         mincross(i) = sqrt(20^2 + 2*((xnow - xi)*cos(psiD) + (ynow - yi)*sin(psiD))*20 + (xnow - xi)^2 + (ynow - yi)^2);
%     elseif mint(i) > 10
%         mincross(i) = sqrt(-mint(i)^2 + (xnow - xi)^2 + (ynow - yi)^2);
%     elseif mint(i) > 5
%         mincross(i) = 0.8*sqrt(-mint(i)^2 + (xnow - xi)^2 + (ynow - yi)^2);
%     else
%         mincross(i) = 0.7*sqrt(-mint(i)^2 + (xnow - xi)^2 + (ynow - yi)^2);
%     end        
end

% safeCoef = min(min(mincross)/10 , 1);
safeCoef = 1;
flag = 0;
for i = 2 : numvert
    for j = 1 : i-1
        if rotatepoint(i)*rotatepoint(j) < 0 && ((mint(i) > 0 && mint(i) <= 20) || (mint(j) > 0 && mint(j) <= 20))
            xi = xobstacle(i);
            yi = yobstacle(i);
            xj = xobstacle(j);
            yj = yobstacle(j);
            if (sin(psiD)*(xj - xi) - cos(psiD)*(yj - yi)) == 0;
                t = 0;
            else                
                t = ((xnow - xi)*(yj - yi) - (ynow - yi)*(xj - xi))/(sin(psiD)*(xj - xi) - cos(psiD)*(yj - yi));
            end
            if t > 0 && t < 10
                safeCoef = 0;   
                flag = 1;
                break;
            elseif t > 10 && t < 20
                safeCoef = safeCoef*0.2;
            else
                safeCoef = safeCoef*1;
            end
        else
            safeCoef = safeCoef*1; 
        end
    end
    if flag == 1 
        break;
    end
end

end

function multipCross = multip(rowvector1 , rowvector2)
    multipCross = rowvector1(1)*rowvector2(2) - rowvector1(2)*rowvector2(1);
end
